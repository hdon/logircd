module numerics;
/* This file has been automatically generated by tool/gen-numerics.py.
 * You are expected to edit it probably to make use of it.
 * For more information please see https://tools.ietf.org/html/rfc1459
 */

string[uint] responses = [

  // 200 RPL_TRACELINK
  // No description
  200: "Link <version & debug level> <destination> <next server>",

  // 201 RPL_TRACECONNECTING
  // No description
  201: "Try. <class> <server>",

  // 202 RPL_TRACEHANDSHAKE
  // No description
  202: "H.S. <class> <server>",

  // 203 RPL_TRACEUNKNOWN
  // No description
  203: "???? <class> [<client IP address in dot form>]",

  // 204 RPL_TRACEOPERATOR
  // No description
  204: "Oper <class> <nick>",

  // 205 RPL_TRACEUSER
  // No description
  205: "User <class> <nick>",

  // 206 RPL_TRACESERVER
  // No description
  206: "Serv <class> <int>S <int>C <server> <nick!user|*!*>@<host|server>",

  // 208 RPL_TRACENEWTYPE
  // No description
  208: "<newtype> 0 <client name>",

  // 211 RPL_STATSLINKINFO
  // No description
  211: "<linkname> <sendq> <sent messages> <sent bytes> <received messages> <received bytes> <time open>",

  // 212 RPL_STATSCOMMANDS
  // No description
  212: "<command> <count>",

  // 213 RPL_STATSCLINE
  // No description
  213: "C <host> * <name> <port> <class>",

  // 214 RPL_STATSNLINE
  // No description
  214: "N <host> * <name> <port> <class>",

  // 215 RPL_STATSILINE
  // No description
  215: "I <host> * <host> <port> <class>",

  // 216 RPL_STATSKLINE
  // No description
  216: "K <host> * <username> <port> <class>",

  // 218 RPL_STATSYLINE
  // No description
  218: "Y <class> <ping frequency> <connect frequency> <max sendq>",

  // 219 RPL_ENDOFSTATS
  // No description
  219: "<stats letter> :End of /STATS report",

  // 221 RPL_UMODEIS
  // 
  // - To answer a query about a client's own mode,
  // RPL_UMODEIS is sent back.
  // 
  221: "<user mode string>",

  // 241 RPL_STATSLLINE
  // No description
  241: "L <hostmask> * <servername> <maxdepth>",

  // 242 RPL_STATSUPTIME
  // No description
  242: ":Server Up %d days %d:%02d:%02d",

  // 243 RPL_STATSOLINE
  // No description
  243: "O <hostmask> * <name>",

  // 244 RPL_STATSHLINE
  // 
  // 
  244: "H <hostmask> * <servername>",

  // 251 RPL_LUSERCLIENT
  // No description
  251: ":There are <integer> users and <integer> invisible on <integer> servers",

  // 252 RPL_LUSEROP
  // No description
  252: "<integer> :operator(s) online",

  // 253 RPL_LUSERUNKNOWN
  // No description
  253: "<integer> :unknown connection(s)",

  // 254 RPL_LUSERCHANNELS
  // No description
  254: "<integer> :channels formed",

  // 255 RPL_LUSERME
  // 
  // - In processing an LUSERS message, the server
  // sends a set of replies from RPL_LUSERCLIENT,
  // RPL_LUSEROP, RPL_USERUNKNOWN,
  // RPL_LUSERCHANNELS and RPL_LUSERME.  When
  // replying, a server must send back
  // RPL_LUSERCLIENT and RPL_LUSERME.  The other
  // replies are only sent back if a non-zero count
  // is found for them.
  // 
  255: ":I have <integer> clients and <integer> servers",

  // 256 RPL_ADMINME
  // No description
  256: "<server> :Administrative info",

  // 257 RPL_ADMINLOC1
  // No description
  257: ":<admin info>",

  // 258 RPL_ADMINLOC2
  // No description
  258: ":<admin info>",

  // 261 RPL_TRACELOG
  // 
  // - The RPL_TRACE* are all returned by the server in
  // response to the TRACE message.  How many are
  // returned is dependent on the the TRACE message and
  // whether it was sent by an operator or not.  There
  // is no predefined order for which occurs first.
  // Replies RPL_TRACEUNKNOWN, RPL_TRACECONNECTING and
  // RPL_TRACEHANDSHAKE are all used for connections
  // which have not been fully established and are either
  // unknown, still attempting to connect or in the
  // process of completing the 'server handshake'.
  // RPL_TRACELINK is sent by any server which handles
  // a TRACE message and has to pass it on to another
  // server.  The list of RPL_TRACELINKs sent in
  // response to a TRACE command traversing the IRC
  // network should reflect the actual connectivity of
  // the servers themselves along that path.
  // RPL_TRACENEWTYPE is to be used for any connection
  // which does not fit in the other categories but is
  // being displayed anyway.
  // 
  261: "File <logfile> <debug level>",

  // 300 RPL_NONE
  // Dummy reply number. Not used.
  300: "NO RESPONSE SPECIFIED",

  // 301 RPL_AWAY
  // 
  // 
  301: "<nick> :<away message>",

  // 302 RPL_USERHOST
  // 
  // - Reply format used by USERHOST to list replies to
  // the query list.  The reply string is composed as
  // follows:
  // <reply> ::= <nick>['*'] '=' <'+'|'-'><hostname>
  // The '*' indicates whether the client has registered
  // as an Operator.  The '-' or '+' characters represent
  // whether the client has set an AWAY message or not
  // respectively.
  // 
  302: ":[<reply>{<space><reply>}]",

  // 303 RPL_ISON
  // 
  // - Reply format used by ISON to list replies to the
  // query list.
  // 
  303: ":[<nick> {<space><nick>}]",

  // 305 RPL_UNAWAY
  // No description
  305: ":You are no longer marked as being away",

  // 306 RPL_NOWAWAY
  // 
  // - These replies are used with the AWAY command (if
  // allowed).  RPL_AWAY is sent to any client sending a
  // PRIVMSG to a client which is away.  RPL_AWAY is only
  // sent by the server to which the client is connected.
  // Replies RPL_UNAWAY and RPL_NOWAWAY are sent when the
  // client removes and sets an AWAY message.
  // 
  306: ":You have been marked as being away",

  // 311 RPL_WHOISUSER
  // No description
  311: "<nick> <user> <host> * :<real name>",

  // 312 RPL_WHOISSERVER
  // No description
  312: "<nick> <server> :<server info>",

  // 313 RPL_WHOISOPERATOR
  // No description
  313: "<nick> :is an IRC operator",

  // 314 RPL_WHOWASUSER
  // No description
  314: "<nick> <user> <host> * :<real name>",

  // 315 RPL_ENDOFWHO
  // 
  // - The RPL_WHOREPLY and RPL_ENDOFWHO pair are used
  // to answer a WHO message.  The RPL_WHOREPLY is only
  // sent if there is an appropriate match to the WHO
  // query.  If there is a list of parameters supplied
  // with a WHO message, a RPL_ENDOFWHO must be sent
  // after processing each list item with <name> being
  // the item.
  // 
  315: "<name> :End of /WHO list",

  // 317 RPL_WHOISIDLE
  // No description
  317: "<nick> <integer> :seconds idle",

  // 318 RPL_ENDOFWHOIS
  // No description
  318: "<nick> :End of /WHOIS list",

  // 319 RPL_WHOISCHANNELS
  // 
  // - Replies 311 - 313, 317 - 319 are all replies
  // generated in response to a WHOIS message.  Given that
  // there are enough parameters present, the answering
  // server must either formulate a reply out of the above
  // numerics (if the query nick is found) or return an
  // error reply.  The '*' in RPL_WHOISUSER is there as
  // the literal character and not as a wild card.  For
  // each reply set, only RPL_WHOISCHANNELS may appear
  // more than once (for long lists of channel names).
  // The '@' and '+' characters next to the channel name
  // indicate whether a client is a channel operator or
  // has been granted permission to speak on a moderated
  // channel.  The RPL_ENDOFWHOIS reply is used to mark
  // the end of processing a WHOIS message.
  // 
  319: "<nick> :{[@|+]<channel><space>}",

  // 321 RPL_LISTSTART
  // No description
  321: "Channel :Users  Name",

  // 322 RPL_LIST
  // No description
  322: "<channel> <# visible> :<topic>",

  // 323 RPL_LISTEND
  // 
  // - Replies RPL_LISTSTART, RPL_LIST, RPL_LISTEND mark
  // the start, actual replies with data and end of the
  // server's response to a LIST command.  If there are
  // no channels available to return, only the start
  // and end reply must be sent.
  // 
  323: ":End of /LIST",

  // 324 RPL_CHANNELMODEIS
  // 
  // 
  324: "<channel> <mode> <mode params>",

  // 331 RPL_NOTOPIC
  // No description
  331: "<channel> :No topic is set",

  // 332 RPL_TOPIC
  // 
  // - When sending a TOPIC message to determine the
  // channel topic, one of two replies is sent.  If
  // the topic is set, RPL_TOPIC is sent back else
  // RPL_NOTOPIC.
  // 
  332: "<channel> :<topic>",

  // 341 RPL_INVITING
  // 
  // - Returned by the server to indicate that the
  // attempted INVITE message was successful and is
  // being passed onto the end client.
  // 
  341: "<channel> <nick>",

  // 342 RPL_SUMMONING
  // 
  // - Returned by a server answering a SUMMON message to
  // indicate that it is summoning that user.
  // 
  342: "<user> :Summoning user to IRC",

  // 351 RPL_VERSION
  // 
  // - Reply by the server showing its version details.
  // The <version> is the version of the software being
  // used (including any patchlevel revisions) and the
  // <debuglevel> is used to indicate if the server is
  // running in "debug mode".
  // The "comments" field may contain any comments about
  // the version or further version details.
  // 
  351: "<version>.<debuglevel> <server> :<comments>",

  // 352 RPL_WHOREPLY
  // No description
  352: "<channel> <user> <host> <server> <nick> <H|G>[*][@|+] :<hopcount> <real name>",

  // 353 RPL_NAMREPLY
  // No description
  353: "<channel> :[[@|+]<nick> [[@|+]<nick> [...]]]",

  // 364 RPL_LINKS
  // No description
  364: "<mask> <server> :<hopcount> <server info>",

  // 365 RPL_ENDOFLINKS
  // 
  // - In replying to the LINKS message, a server must send
  // replies back using the RPL_LINKS numeric and mark the
  // end of the list using an RPL_ENDOFLINKS reply.
  // 
  365: "<mask> :End of /LINKS list",

  // 366 RPL_ENDOFNAMES
  // 
  // - To reply to a NAMES message, a reply pair consisting
  // of RPL_NAMREPLY and RPL_ENDOFNAMES is sent by the
  // server back to the client.  If there is no channel
  // found as in the query, then only RPL_ENDOFNAMES is
  // returned.  The exception to this is when a NAMES
  // message is sent with no parameters and all visible
  // channels and contents are sent back in a series of
  // RPL_NAMEREPLY messages with a RPL_ENDOFNAMES to mark
  // the end.
  // 
  366: "<channel> :End of /NAMES list",

  // 367 RPL_BANLIST
  // No description
  367: "<channel> <banid>",

  // 368 RPL_ENDOFBANLIST
  // 
  // - When listing the active 'bans' for a given channel,
  // a server is required to send the list back using the
  // RPL_BANLIST and RPL_ENDOFBANLIST messages.  A separate
  // RPL_BANLIST is sent for each active banid.  After the
  // banids have been listed (or if none present) a
  // RPL_ENDOFBANLIST must be sent.
  // 
  368: "<channel> :End of channel ban list",

  // 369 RPL_ENDOFWHOWAS
  // 
  // - When replying to a WHOWAS message, a server must use
  // the replies RPL_WHOWASUSER, RPL_WHOISSERVER or
  // ERR_WASNOSUCHNICK for each nickname in the presented
  // list.  At the end of all reply batches, there must
  // be RPL_ENDOFWHOWAS (even if there was only one reply
  // and it was an error).
  // 
  369: "<nick> :End of WHOWAS",

  // 371 RPL_INFO
  // No description
  371: ":<string>",

  // 372 RPL_MOTD
  // No description
  372: ":- <text>",

  // 374 RPL_ENDOFINFO
  // 
  // - A server responding to an INFO message is required to
  // send all its 'info' in a series of RPL_INFO messages
  // with a RPL_ENDOFINFO reply to indicate the end of the
  // replies.
  // 
  374: ":End of /INFO list",

  // 375 RPL_MOTDSTART
  // No description
  375: ":- <server> Message of the day - ",

  // 376 RPL_ENDOFMOTD
  // 
  // - When responding to the MOTD message and the MOTD file
  // is found, the file is displayed line by line, with
  // each line no longer than 80 characters, using
  // RPL_MOTD format replies.  These should be surrounded
  // by a RPL_MOTDSTART (before the RPL_MOTDs) and an
  // RPL_ENDOFMOTD (after).
  // 
  376: ":End of /MOTD command",

  // 381 RPL_YOUREOPER
  // 
  // - RPL_YOUREOPER is sent back to a client which has
  // just successfully issued an OPER message and gained
  // operator status.
  // 
  381: ":You are now an IRC operator",

  // 382 RPL_REHASHING
  // 
  // - If the REHASH option is used and an operator sends
  // a REHASH message, an RPL_REHASHING is sent back to
  // the operator.
  // 
  382: "<config file> :Rehashing",

  // 391 RPL_TIME
  // 
  // - When replying to the TIME message, a server must send
  // the reply using the RPL_TIME format above.  The string
  // showing the time need only contain the correct day and
  // time there.  There is no further requirement for the
  // time string.
  // 
  391: "<server> :<string showing server's local time>",

  // 392 RPL_USERSSTART
  // No description
  392: ":UserID   Terminal  Host",

  // 393 RPL_USERS
  // No description
  393: ":%-8s %-9s %-8s",

  // 394 RPL_ENDOFUSERS
  // No description
  394: ":End of users",

  // 395 RPL_NOUSERS
  // 
  // - If the USERS message is handled by a server, the
  // replies RPL_USERSTART, RPL_USERS, RPL_ENDOFUSERS and
  // RPL_NOUSERS are used.  RPL_USERSSTART must be sent
  // first, following by either a sequence of RPL_USERS
  // or a single RPL_NOUSER.  Following this is
  // RPL_ENDOFUSERS.
  // 
  395: ":Nobody logged in",

  // 401 ERR_NOSUCHNICK
  // 
  // - Used to indicate the nickname parameter supplied to a
  // command is currently unused.
  // 
  401: "<nickname> :No such nick/channel",

  // 402 ERR_NOSUCHSERVER
  // 
  // - Used to indicate the server name given currently
  // doesn't exist.
  // 
  402: "<server name> :No such server",

  // 403 ERR_NOSUCHCHANNEL
  // 
  // - Used to indicate the given channel name is invalid.
  // 
  403: "<channel name> :No such channel",

  // 404 ERR_CANNOTSENDTOCHAN
  // 
  // - Sent to a user who is either (a) not on a channel
  // which is mode +n or (b) not a chanop (or mode +v) on
  // a channel which has mode +m set and is trying to send
  // a PRIVMSG message to that channel.
  // 
  404: "<channel name> :Cannot send to channel",

  // 405 ERR_TOOMANYCHANNELS
  // Sent to a user when they have joined the maximum
  // number of allowed channels and they try to join
  // another channel.
  // 
  405: "<channel name> :You have joined too many channels",

  // 406 ERR_WASNOSUCHNICK
  // 
  // - Returned by WHOWAS to indicate there is no history
  // information for that nickname.
  // 
  406: "<nickname> :There was no such nickname",

  // 407 ERR_TOOMANYTARGETS
  // 
  // - Returned to a client which is attempting to send a
  // PRIVMSG/NOTICE using the user@host destination format
  // and for a user@host which has several occurrences.
  // 
  407: "<target> :Duplicate recipients. No message delivered",

  // 409 ERR_NOORIGIN
  // 
  // - PING or PONG message missing the originator parameter
  // which is required since these commands must work
  // without valid prefixes.
  // 
  409: ":No origin specified",

  // 411 ERR_NORECIPIENT
  // No description
  411: ":No recipient given (<command>)",

  // 412 ERR_NOTEXTTOSEND
  // No description
  412: ":No text to send",

  // 413 ERR_NOTOPLEVEL
  // No description
  413: "<mask> :No toplevel domain specified",

  // 414 ERR_WILDTOPLEVEL
  // 
  // - 412 - 414 are returned by PRIVMSG to indicate that
  // the message wasn't delivered for some reason.
  // ERR_NOTOPLEVEL and ERR_WILDTOPLEVEL are errors that
  // are returned when an invalid use of
  // "PRIVMSG $<server>" or "PRIVMSG #<host>" is attempted.
  // 
  414: "<mask> :Wildcard in toplevel domain",

  // 421 ERR_UNKNOWNCOMMAND
  // 
  // - Returned to a registered client to indicate that the
  // command sent is unknown by the server.
  // 
  421: "<command> :Unknown command",

  // 422 ERR_NOMOTD
  // 
  // - Server's MOTD file could not be opened by the server.
  // 
  422: ":MOTD File is missing",

  // 423 ERR_NOADMININFO
  // 
  // - Returned by a server in response to an ADMIN message
  // when there is an error in finding the appropriate
  // information.
  // 
  423: "<server> :No administrative info available",

  // 424 ERR_FILEERROR
  // 
  // - Generic error message used to report a failed file
  // operation during the processing of a message.
  // 
  424: ":File error doing <file op> on <file>",

  // 431 ERR_NONICKNAMEGIVEN
  // 
  // - Returned when a nickname parameter expected for a
  // command and isn't found.
  // 
  431: ":No nickname given",

  // 432 ERR_ERRONEUSNICKNAME
  // 
  // - Returned after receiving a NICK message which contains
  // characters which do not fall in the defined set.  See
  // section x.x.x for details on valid nicknames.
  // 
  432: "<nick> :Erroneus nickname",

  // 433 ERR_NICKNAMEINUSE
  // 
  // - Returned when a NICK message is processed that results
  // in an attempt to change to a currently existing
  // nickname.
  // 
  433: "<nick> :Nickname is already in use",

  // 436 ERR_NICKCOLLISION
  // 
  // - Returned by a server to a client when it detects a
  // nickname collision (registered of a NICK that
  // already exists by another server).
  // 
  436: "<nick> :Nickname collision KILL",

  // 441 ERR_USERNOTINCHANNEL
  // 
  // - Returned by the server to indicate that the target
  // user of the command is not on the given channel.
  // 
  441: "<nick> <channel> :They aren't on that channel",

  // 442 ERR_NOTONCHANNEL
  // 
  // - Returned by the server whenever a client tries to
  // perform a channel effecting command for which the
  // client isn't a member.
  // 
  442: "<channel> :You're not on that channel",

  // 443 ERR_USERONCHANNEL
  // 
  // - Returned when a client tries to invite a user to a
  // channel they are already on.
  // 
  443: "<user> <channel> :is already on channel",

  // 444 ERR_NOLOGIN
  // 
  // - Returned by the summon after a SUMMON command for a
  // user was unable to be performed since they were not
  // logged in.
  // 
  444: "<user> :User not logged in",

  // 445 ERR_SUMMONDISABLED
  // 
  // - Returned as a response to the SUMMON command.  Must be
  // returned by any server which does not implement it.
  // 
  445: ":SUMMON has been disabled",

  // 446 ERR_USERSDISABLED
  // 
  // - Returned as a response to the USERS command.  Must be
  // returned by any server which does not implement it.
  // 
  446: ":USERS has been disabled",

  // 451 ERR_NOTREGISTERED
  // 
  // - Returned by the server to indicate that the client
  // must be registered before the server will allow it
  // to be parsed in detail.
  // 
  451: ":You have not registered",

  // 461 ERR_NEEDMOREPARAMS
  // 
  // - Returned by the server by numerous commands to
  // indicate to the client that it didn't supply enough
  // parameters.
  // 
  461: "<command> :Not enough parameters",

  // 462 ERR_ALREADYREGISTRED
  // 
  // - Returned by the server to any link which tries to
  // change part of the registered details (such as
  // password or user details from second USER message).
  // 
  462: ":You may not reregister",

  // 463 ERR_NOPERMFORHOST
  // 
  // - Returned to a client which attempts to register with
  // a server which does not been setup to allow
  // connections from the host the attempted connection
  // is tried.
  // 
  463: ":Your host isn't among the privileged",

  // 464 ERR_PASSWDMISMATCH
  // 
  // - Returned to indicate a failed attempt at registering
  // a connection for which a password was required and
  // was either not given or incorrect.
  // 
  464: ":Password incorrect",

  // 465 ERR_YOUREBANNEDCREEP
  // 
  // - Returned after an attempt to connect and register
  // yourself with a server which has been setup to
  // explicitly deny connections to you.
  // 
  465: ":You are banned from this server",

  // 467 ERR_KEYSET
  // No description
  467: "<channel> :Channel key already set",

  // 471 ERR_CHANNELISFULL
  // No description
  471: "<channel> :Cannot join channel (+l)",

  // 472 ERR_UNKNOWNMODE
  // No description
  472: "<char> :is unknown mode char to me",

  // 473 ERR_INVITEONLYCHAN
  // No description
  473: "<channel> :Cannot join channel (+i)",

  // 474 ERR_BANNEDFROMCHAN
  // No description
  474: "<channel> :Cannot join channel (+b)",

  // 475 ERR_BADCHANNELKEY
  // No description
  475: "<channel> :Cannot join channel (+k)",

  // 481 ERR_NOPRIVILEGES
  // 
  // - Any command requiring operator privileges to operate
  // must return this error to indicate the attempt was
  // unsuccessful.
  // 
  481: ":Permission Denied- You're not an IRC operator",

  // 482 ERR_CHANOPRIVSNEEDED
  // 
  // - Any command requiring 'chanop' privileges (such as
  // MODE messages) must return this error if the client
  // making the attempt is not a chanop on the specified
  // channel.
  // 
  482: "<channel> :You're not channel operator",

  // 483 ERR_CANTKILLSERVER
  // 
  // - Any attempts to use the KILL command on a server
  // are to be refused and this error returned directly
  // to the client.
  // 
  483: ":You cant kill a server!",

  // 491 ERR_NOOPERHOST
  // 
  // - If a client sends an OPER message and the server has
  // not been configured to allow connections from the
  // client's host as an operator, this error must be
  // returned.
  // 
  491: ":No O-lines for your host",

  // 501 ERR_UMODEUNKNOWNFLAG
  // 
  // - Returned by the server to indicate that a MODE
  // message was sent with a nickname parameter and that
  // the a mode flag sent was not recognized.
  // 
  501: ":Unknown MODE flag",

  // 502 ERR_USERSDONTMATCH
  // 
  // - Error sent to any user trying to view or change the
  // user mode for a user other than themselves.
  // 
  502: ":Cant change mode for other users",
];
enum RPL_TRACELINK = 200;
enum RPL_TRACECONNECTING = 201;
enum RPL_TRACEHANDSHAKE = 202;
enum RPL_TRACEUNKNOWN = 203;
enum RPL_TRACEOPERATOR = 204;
enum RPL_TRACEUSER = 205;
enum RPL_TRACESERVER = 206;
enum RPL_TRACENEWTYPE = 208;
enum RPL_STATSLINKINFO = 211;
enum RPL_STATSCOMMANDS = 212;
enum RPL_STATSCLINE = 213;
enum RPL_STATSNLINE = 214;
enum RPL_STATSILINE = 215;
enum RPL_STATSKLINE = 216;
enum RPL_STATSYLINE = 218;
enum RPL_ENDOFSTATS = 219;
enum RPL_UMODEIS = 221;
enum RPL_STATSLLINE = 241;
enum RPL_STATSUPTIME = 242;
enum RPL_STATSOLINE = 243;
enum RPL_STATSHLINE = 244;
enum RPL_LUSERCLIENT = 251;
enum RPL_LUSEROP = 252;
enum RPL_LUSERUNKNOWN = 253;
enum RPL_LUSERCHANNELS = 254;
enum RPL_LUSERME = 255;
enum RPL_ADMINME = 256;
enum RPL_ADMINLOC1 = 257;
enum RPL_ADMINLOC2 = 258;
enum RPL_TRACELOG = 261;
enum RPL_NONE = 300;
enum RPL_AWAY = 301;
enum RPL_USERHOST = 302;
enum RPL_ISON = 303;
enum RPL_UNAWAY = 305;
enum RPL_NOWAWAY = 306;
enum RPL_WHOISUSER = 311;
enum RPL_WHOISSERVER = 312;
enum RPL_WHOISOPERATOR = 313;
enum RPL_WHOWASUSER = 314;
enum RPL_ENDOFWHO = 315;
enum RPL_WHOISIDLE = 317;
enum RPL_ENDOFWHOIS = 318;
enum RPL_WHOISCHANNELS = 319;
enum RPL_LISTSTART = 321;
enum RPL_LIST = 322;
enum RPL_LISTEND = 323;
enum RPL_CHANNELMODEIS = 324;
enum RPL_NOTOPIC = 331;
enum RPL_TOPIC = 332;
enum RPL_INVITING = 341;
enum RPL_SUMMONING = 342;
enum RPL_VERSION = 351;
enum RPL_WHOREPLY = 352;
enum RPL_NAMREPLY = 353;
enum RPL_LINKS = 364;
enum RPL_ENDOFLINKS = 365;
enum RPL_ENDOFNAMES = 366;
enum RPL_BANLIST = 367;
enum RPL_ENDOFBANLIST = 368;
enum RPL_ENDOFWHOWAS = 369;
enum RPL_INFO = 371;
enum RPL_MOTD = 372;
enum RPL_ENDOFINFO = 374;
enum RPL_MOTDSTART = 375;
enum RPL_ENDOFMOTD = 376;
enum RPL_YOUREOPER = 381;
enum RPL_REHASHING = 382;
enum RPL_TIME = 391;
enum RPL_USERSSTART = 392;
enum RPL_USERS = 393;
enum RPL_ENDOFUSERS = 394;
enum RPL_NOUSERS = 395;
enum ERR_NOSUCHNICK = 401;
enum ERR_NOSUCHSERVER = 402;
enum ERR_NOSUCHCHANNEL = 403;
enum ERR_CANNOTSENDTOCHAN = 404;
enum ERR_TOOMANYCHANNELS = 405;
enum ERR_WASNOSUCHNICK = 406;
enum ERR_TOOMANYTARGETS = 407;
enum ERR_NOORIGIN = 409;
enum ERR_NORECIPIENT = 411;
enum ERR_NOTEXTTOSEND = 412;
enum ERR_NOTOPLEVEL = 413;
enum ERR_WILDTOPLEVEL = 414;
enum ERR_UNKNOWNCOMMAND = 421;
enum ERR_NOMOTD = 422;
enum ERR_NOADMININFO = 423;
enum ERR_FILEERROR = 424;
enum ERR_NONICKNAMEGIVEN = 431;
enum ERR_ERRONEUSNICKNAME = 432;
enum ERR_NICKNAMEINUSE = 433;
enum ERR_NICKCOLLISION = 436;
enum ERR_USERNOTINCHANNEL = 441;
enum ERR_NOTONCHANNEL = 442;
enum ERR_USERONCHANNEL = 443;
enum ERR_NOLOGIN = 444;
enum ERR_SUMMONDISABLED = 445;
enum ERR_USERSDISABLED = 446;
enum ERR_NOTREGISTERED = 451;
enum ERR_NEEDMOREPARAMS = 461;
enum ERR_ALREADYREGISTRED = 462;
enum ERR_NOPERMFORHOST = 463;
enum ERR_PASSWDMISMATCH = 464;
enum ERR_YOUREBANNEDCREEP = 465;
enum ERR_KEYSET = 467;
enum ERR_CHANNELISFULL = 471;
enum ERR_UNKNOWNMODE = 472;
enum ERR_INVITEONLYCHAN = 473;
enum ERR_BANNEDFROMCHAN = 474;
enum ERR_BADCHANNELKEY = 475;
enum ERR_NOPRIVILEGES = 481;
enum ERR_CHANOPRIVSNEEDED = 482;
enum ERR_CANTKILLSERVER = 483;
enum ERR_NOOPERHOST = 491;
enum ERR_UMODEUNKNOWNFLAG = 501;
enum ERR_USERSDONTMATCH = 502;
